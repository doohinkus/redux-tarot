{"version":3,"sources":["actions/index.js","reducers/index.js","store/index.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["C","SHUFFLEDECK","SELECTCARD","FLIPCARD","GETTHREECARDS","randomArr","arr","sort","Math","random","shuffledCards","cards","defaultState","Object","toConsumableArray","selected","selectedCards","filter","card","index","rootReducer","state","arguments","length","undefined","action","randomCard","floor","shuffled","type","objectSpread","concat","payload","map","assign","flipped","fetch_joke","joke","middleware","applyMiddleware","thunk","logger","store","createStore","Card","_ref","isFlipped","title","faceValue","tagline","flipCard","react_default","a","createElement","data-cy","Fragment","className","onClick","alt","src","defaultProps","mapDispatchToProps","cardId","getThreeCards","dadJoke","dispatch","fetch","then","res","json","attachments","text","connect","props","key","components_Card","img","meaning","article","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf33c086.chunk.js","sourcesContent":["// action names\nconst C = {\n  SHUFFLEDECK: 'SHUFFLEDECK',\n  SELECTCARD: 'SELECTCARD',\n  FLIPCARD: 'FLIPCARD',\n  GETTHREECARDS: 'GETTHREECARDS',\n};\n// action creators\nfunction shuffleDeck() {\n  return {\n    type: C.SHUFFLEDECK,\n  };\n}\nfunction getThreeCards() {\n  return {\n    type: C.GETTHREECARDS,\n  };\n}\nfunction selectCard(cardId) {\n  return {\n    type: C.SELECTCARD,\n    payload: cardId,\n  };\n}\n\nfunction flipCard(cardId) {\n  return {\n    type: C.FLIPCARD,\n    payload: cardId,\n  };\n}\n\nfunction dadJoke() {\n  return (dispatch) => {\n    dispatch({ type: 'START_DAD_JOKE' });\n    return fetch('https://icanhazdadjoke.com/slack')\n      .then(res => res.json())\n      .then(res => dispatch({\n        type: 'DAD_JOKE',\n        payload: res.attachments[0].text,\n      }));\n  };\n}\n// reducer outputs new state\n// should the new state come from here? If asynch, yes.\n/* EXAMPLE OF HOW TO CALL ASYCH ACTIONS */\n// Example of asych\n// export function selectSubreddit(subreddit) {\n//   return {\n//     type: SELECT_SUBREDDIT,\n//     subreddit\n//   }\n// }\n\n// export function invalidateSubreddit(subreddit) {\n//   return {\n//     type: INVALIDATE_SUBREDDIT,\n//     subreddit\n//   }\n// }\n\n// function requestPosts(subreddit) {\n//   return {\n//     type: REQUEST_POSTS,\n//     subreddit\n//   }\n// }\n\n// function receivePosts(subreddit, json) {\n//   return {\n//     type: RECEIVE_POSTS,\n//     subreddit,\n//     posts: json.data.children.map(child => child.data),\n//     receivedAt: Date.now()\n//   }\n// }\n\n// function fetchPosts(subreddit) {\n//   return dispatch => {\n//     dispatch(requestPosts(subreddit))\n//     return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n//       .then(response => response.json())\n//       .then(json => dispatch(receivePosts(subreddit, json)))\n//   }\n// }\n\n// function shouldFetchPosts(state, subreddit) {\n//   const posts = state.postsBySubreddit[subreddit]\n//   if (!posts) {\n//     return true\n//   } else if (posts.isFetching) {\n//     return false\n//   } else {\n//     return posts.didInvalidate\n//   }\n// }\n\n// export function fetchPostsIfNeeded(subreddit) {\n//   return (dispatch, getState) => {\n//     if (shouldFetchPosts(getState(), subreddit)) {\n//       return dispatch(fetchPosts(subreddit))\n//     }\n//   }\n// }\n\nexport {\n  shuffleDeck,\n  selectCard,\n  flipCard,\n  getThreeCards,\n  dadJoke,\n  C,\n};\n","// import { combineReducers } from 'redux';\nimport { C } from '../actions';\nimport cards from '../data/index.json';\n\nfunction randomArr(arr) {\n  return arr.sort(() => Math.random() - 0.5);\n}\n// set random cards for initial state\n// this allows the cards to appear on screen without using component life cycle method\nconst shuffledCards = randomArr(cards.cards);\nconst defaultState = {\n  cards: [...cards.cards],\n  selected: [],\n  selectedCards: [...shuffledCards.filter((card, index) => index === 2\n    || index === 3 || index === 5),\n  ],\n};\n// root reducer\nconst rootReducer = (state = defaultState, action) => {\n  const randomCard = Math.floor(Math.random() * state.cards.length);\n  const shuffled = randomArr(state.cards);\n  switch (action.type) {\n    case C.GETTHREECARDS:\n      // shuffle array grab three items\n      // the modifications could be done in the actions, then the payload would be the new state.\n      // eg, return { ...state, action.payload }\n      // payload has the state change / modified information see below\n      // action.payload = selectedCards: [ shuffled cards here ]\n      // that is the pattern for asynch actions\n      return {\n        ...state,\n        selectedCards: [...shuffled.filter((card, index) => index === 2\n          || index === 3 || index === 5),\n        ],\n      };\n    case C.SHUFFLEDECK:\n      return [\n        ...state,\n        action.payload,\n      ];\n    case C.SELECTCARD:\n      return {\n        ...state,\n        selected: [...state.cards.filter((card, index) => index === randomCard)],\n      };\n    case C.FLIPCARD:\n      return {\n        ...state,\n        selectedCards: [...state.selectedCards.map((card) => {\n          if (card.card === action.payload) {\n            // copy merged object into empty object\n            return Object.assign({},\n              card,\n              {\n                flipped: !card.flipped,\n              });\n          }\n          return card;\n        })],\n      };\n    case 'START_DAD_JOKE':\n      return {\n        ...state,\n        fetch_joke: true,\n      };\n    case 'DAD_JOKE':\n      return {\n        ...state,\n        joke: action.payload,\n        fetch_joke: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n// export default combineReducers({\n//   cardReducers,\n// });\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers';\n\n/* eslint-disable no-underscore-dangle */\nconst middleware = applyMiddleware(thunk, logger);\nconst store = createStore(\n  rootReducer,\n  middleware,\n  /* preloadedState, */\n);\n/* eslint-enable */\nexport default store;\n// export default function configureStore(initialState = sample) {\n//   return createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(thunk),\n//   );\n// }\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/jsx-filename-extension */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction Card({\n  isFlipped,\n  title,\n  faceValue,\n  tagline,\n  flipCard,\n}) {\n  const back = './images/card-back.jpg';\n  return (\n    <section data-cy=\"card\">\n      <React.Fragment>\n        <p className={isFlipped ? 'fade-in' : 'fade-out'}>{title}</p>\n        <button\n          type=\"button\"\n          className=\"no-border rounded fade-in pointer slide-in-elliptic-top-fwd\"\n          onClick={flipCard}\n        >\n          <img\n            alt={title}\n            className={`rounded ${isFlipped ? 'is-flipped' : 'is-facedown'}`}\n            src={isFlipped ? faceValue : back}\n          />\n        </button>\n        <p className={isFlipped ? 'fade-in' : 'fade-out'}>{tagline}</p>\n\n      </React.Fragment>\n    </section>\n  );\n}\nCard.defaultProps = {\n  isFlipped: false,\n};\nCard.propTypes = {\n  isFlipped: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  tagline: PropTypes.string.isRequired,\n  faceValue: PropTypes.string.isRequired,\n  flipCard: PropTypes.func.isRequired,\n};\nexport default Card;\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { flipCard, getThreeCards, dadJoke } from './actions';\nimport './App.css';\nimport Card from './components/Card';\n// pull the state you want to use\nconst mapStateToProps = (state) => ({\n  selectedCards: state.selectedCards\n});\n\n// pull the actions you want to use\nconst mapDispatchToProps = {\n  flipCard,\n  getThreeCards,\n  dadJoke,\n};\nfunction App(props) {\n  // destructure props\n  const { selectedCards } = props;\n  return (\n    <div className=\"App\">\n      <section className=\"App-header\">\n        <h1>Marseille Tarot</h1>\n        <button\n          // no need to destructure actions\n          onClick={() => props.getThreeCards()}\n          type=\"button\"\n          className=\"no-border\"\n          data-cy=\"shuffle-button\"\n        >\n          <img\n            src=\"./images/tarot-button.gif\"\n            alt=\"sun button roll\"\n            className=\"pointer\"\n          />\n        </button>\n        <span className=\"small\">shuffle</span>\n        <div className=\"grid\">\n          {selectedCards &&\n            selectedCards.map((card) => (\n              <React.Fragment key={card.card}>\n                <Card\n                  title={card.title}\n                  faceValue={card.img}\n                  isFlipped={card.flipped}\n                  tagline={card.tagline}\n                  meaning={card.article}\n                  flipCard={() => props.flipCard(card.card)}\n                />\n              </React.Fragment>\n            ))}\n        </div>\n      </section>\n    </div>\n  );\n}\nApp.propTypes = {\n  selectedCards: PropTypes.array.isRequired,\n  flipCard: PropTypes.func.isRequired,\n  getThreeCards: PropTypes.func.isRequired\n};\n// glue redux to this component\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}